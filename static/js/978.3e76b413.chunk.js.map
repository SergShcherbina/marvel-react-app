{"version":3,"file":"static/js/978.3e76b413.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/spinner/SmallSpinner.js","components/formSearch/FormSearch.js","components/pages/MainPage.js","services/MarvelServices.js","components/hooks/useHttp.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport {Component} from \"react\";\n\n\nclass ErrorBoundary extends Component {                             //классовай компонент отлавливающий ошибки\n\n    state = {\n        error: false\n    };\n\n    componentDidCatch(error, errorInfo) {                      //хук срабатывающий при ошибке\n        debugger\n        console.log(error, errorInfo);\n        this.setState({error: true})\n    };\n\n    render () {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import errorGif from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img src={errorGif} alt=\"error\" style={{display: 'block', margin: '0 auto'}} />\n\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />   //если используем файл из папки public\n    )\n}\n\nexport default ErrorMessage;","import './randomChar.scss';\nimport { useState, useEffect } from 'react';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelServices';\nimport {CSSTransition} from 'react-transition-group'\nimport setContent from '../../utils/setContent';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const [blockShow, setBlockShow] = useState(false);\n    const {process, setProcess, getCharacter, clearError} = useMarvelService(); \n\n    useEffect(()=> {\n        updateChar();\n        setBlockShow(true);\n        const timerId = setInterval(updateChar, 60000);               //переключение персонажей раз в минуту\n\n        return(()=> {                                                 //удаляем ссылку на таймер (обязательно!)\n            clearInterval(timerId);\n        });\n    }, [])\n\n    const onCharLoded = (char) => {\n        setChar(char);\n    };\n\n    function updateChar () {\n        const id = Math.floor(Math.random() * (1011300 - 1011150) + 1011136);\n        clearError();                                                //если была ошибка при предыдущ загрузке, сбрасываем ее\n\n        getCharacter(id)\n            .then(onCharLoded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <CSSTransition classNames={'randomchar'} timeout={500} in={blockShow} unmountOnExit >\n            <div className=\"randomchar\">\n                {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\"\n                            onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        </CSSTransition>\n    )\n}\n\nconst View = ({data}) => {\n    const [blockShow, setBlockShow] = useState(false);\n\n    useEffect(()=> {\n        setBlockShow(true)\n    }, [data])\n\n    const {name, description, thumbnail, homepage, wiki} = data;\n    const descrFix = !description ? 'Описание отсутствует' : description.slice(0,230) + '...';\n\n    //если в названии картинки есть строка \"image_not_available\" то меняем свойство objectFit\n    const styleImgChar = thumbnail.includes('image_not_available') ? {objectFit: 'contain'} : null;  \n\n    return (\n        <CSSTransition classNames={'randomchar__block'} timeout={500} in={blockShow} unmountOnExit >\n            <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={styleImgChar} />\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                        {descrFix}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div> \n        </CSSTransition>\n    )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport {useEffect, useState, useRef, useMemo} from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport propTypes from \"prop-types\";\n\nconst setContent = (process, Component, newItemLoading) => {           //не импортируем а делаем кастомный из-за newItemLoading\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default :\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [offset, setOffset] = useState(140);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [charEnded, setCharEnded] = useState(false);\n    const {process, setProcess, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        updateCharList()\n    }, []);\n\n    const onRequest = (offset) => {\n        setNewItemLoading(true)\n        updateCharList(offset);\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {                                     //Если длинна нового массива меньше 9\n            ended = true;\n        }\n\n        setCharList(() => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended)\n    };\n\n    const updateCharList = (offset) => {\n        getAllCharacters(offset)\n            .then(res => onCharListLoaded(res))\n            .then(() => setProcess('confirmed'))\n    }\n\n    const itemRefs = useRef([]);\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const handleClick = (id, i) => {\n        props.getCharId(id)\n        focusOnItem(i)\n    }\n\n    const renderItems = (characters) => {                               //формирование верстки из данных сервера\n        const charLi = characters.map((items, i) => {\n            const {name, thumbnail, id} = items;\n            const styleImg = thumbnail.includes('image_not_available') ? {objectFit: 'fill'} : null;\n\n            return (\n                <CSSTransition key={id} timeout={5000} classNames=\"char__item\">\n                    <li className=\"char__item\"\n                        key={id}\n                        ref={(el) => itemRefs.current[i] = el}\n                        onClick={() => handleClick(id, i)}\n                        tabIndex={0}>\n                        <div className=\"char__wrapperImage\">\n                            <img src={thumbnail} alt={name} style={styleImg}/>\n                        </div>\n                        <div className=\"char__wrapperName\">\n                            <div className=\"char__wrapperName_name\">{name}</div>\n                        </div>\n                    </li>\n                </CSSTransition>\n            );\n        });\n\n        return (                                                        //конструкция вынесена для центровки спиннера/ошибки\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {charLi}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {                                    //убираем лишний рендеринг\n        //вместо второго аргумента Component можем передать ф-ю, тогда будет работать                                \n        return setContent(process, () => renderItems(charList), newItemLoading)\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    onClick={() => onRequest(offset)}\n                    style={{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">\n                    {newItemLoading ? 'Loading...' : 'load more'}\n                </div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {                                                  //проверка пропса с помощью PropTypes\n    getCharId: propTypes.func.isRequired                                //прверяем что пропс передан и содержит функцию\n}\n\nexport default CharList;\n\n","import './charInfo.scss';\nimport { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelServices';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport setContent from '../../utils/setContent';\n\n\nconst CharInfo = (props) => {\n    const {charId} = props;\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n    const [isOpen, setIsOpen ] = useState(false)\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };    \n\n    const updateChar = () => {\n        if(!charId) return;                                                    //если приходит null, то запрос не делаем\n        setIsOpen(true)\n\n        clearError();\n        getCharacter(charId)\n            .then(res => {onCharLoaded(res)})\n            .then(() => {\n                setProcess('confirmed')                            //устанавливаем состояние после того как приходит результат\n            })\n    };\n\n    useEffect(() => {\n        updateChar();\n    }, [charId]);\n\n    const handleClick = () => {\n        setIsOpen(false)\n    }\n\n    return (\n        <>\n            <div className={isOpen ? 'wrapperInfo' : null} onClick={handleClick}>\n                <div className={ isOpen ? 'char__active char__info' : 'char__info'} >\n                    {setContent(process, View, char)}\n                </div>\n            </div>\n        </>\n    )    \n}\n\nexport const View = ({data}) => {                                            //переименовали так как из setContent возвр уже data вместо char\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    const styleImgChar = thumbnail.includes('image_not_available') ? {objectFit: 'contain'} : null; \n\n    const renderList = () => {\n        return (\n            <ul className=\"char__comics-list\"> \n\n                {comics.length > 0 ? null : 'There is no comics with this character'} \n\n                {comics.map((item, i) => {\n                    \n                    const idComicInfo = item.resourceURI.match(/\\d{2,}/)[0]    //получаем id комикса из url адреса с сервера     \n                    \n                    return (\n                        <Link to={`/comics/${idComicInfo}`} \n                        className=\"char__comics-item\" key={i} >\n                            <li>\n                                {item.name}\n                            </li>\n                        </Link>\n                    )  \n                })}       \n            </ul>\n        )\n    }    \n\n    return <>\n        <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={styleImgChar} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>    \n        {renderList()}            \n    </>\n}\n\nCharInfo.propTypes = {                                           //валидация пропсов элемента с помощью PropTypes\n    charId: propTypes.number,                                    //указываем какой пропс: какой тип данный должен прийти\n}\n\nexport default CharInfo;\n","const SmallSpinner = () => {\n    return (\n        <svg\n            style={{ margin: \"0 auto\", display: \"block\" }}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            version=\"1.0\"\n            width=\"53px\"\n            height=\"7px\"\n            viewBox=\"0 0 457 60\"\n        >\n            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#FFFFFF\" />\n            <g>\n                <circle fill=\"#000000\" cx=\"-31\" cy=\"30\" r=\"30\" />\n                <circle fill=\"#323232\" cx=\"-97\" cy=\"30\" r=\"24\" />\n                <circle fill=\"#646464\" cx=\"-163\" cy=\"30\" r=\"19\" />\n                <circle fill=\"#c8c8c8\" cx=\"-229.5\" cy=\"30.5\" r=\"13.5\" />\n                <circle fill=\"#e1e1e1\" cx=\"-295\" cy=\"31\" r=\"11\" />\n                <animateTransform\n                    attributeName=\"transform\"\n                    type=\"translate\"\n                    values=\"61 0;127 0;193 0;259 0;325 0;391 0;457 0;523 0;589 0;655 0;721 0;787 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;\"\n                    calcMode=\"discrete\"\n                    dur=\"960ms\"\n                    repeatCount=\"indefinite\"\n                />\n            </g>\n            <g>\n                <circle fill=\"#000000\" cx=\"488\" cy=\"30\" r=\"30\" />\n                <circle fill=\"#323232\" cx=\"554\" cy=\"30\" r=\"24\" />\n                <circle fill=\"#646464\" cx=\"620\" cy=\"30\" r=\"19\" />\n                <circle fill=\"#c8c8c8\" cx=\"686.5\" cy=\"30.5\" r=\"13.5\" />\n                <circle fill=\"#e1e1e1\" cx=\"753\" cy=\"31\" r=\"11\" />\n                <animateTransform\n                    attributeName=\"transform\"\n                    type=\"translate\"\n                    values=\"0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;-61 0;-127 0;-193 0;-259 0;-325 0;-391 0;-457 0;-523 0;-589 0;-655 0;-721 0;-787 0;\"\n                    calcMode=\"discrete\"\n                    dur=\"960ms\"\n                    repeatCount=\"indefinite\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default SmallSpinner;\n","import { Formik, Form, Field, ErrorMessage as ErrorMessageForm } from 'formik';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelServices'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport SmallSpinner from '../spinner/SmallSpinner';\n\nimport './formSearch.scss'\n\nconst setContent = (process, Component, result) => {           //не импортируем а делаем кастомный из-за newItemLoading\n    switch (process) {\n        case 'waiting': return  null;\n            // break;\n        case 'loading': return <SmallSpinner/>;\n            // break;\n        case 'confirmed': return result;\n            // break;\n        case 'error': return <div className='form__error' > {Component} </div>;\n            // break;\n        default :  return \"oh\";\n    }\n}\n\nconst validate = values => {                                                    //созд ф-ю по валидации\n        const errors = {};                                                   //обьект в который собираем ошибки\n        \n        if(!values.search){\n            errors.search = 'Required field';        \n        } else if (values.search.length < 2) {\n            errors.search = 'At least 2 symbol'\n        } else if (!/[a-zA-Z]/.test(values.search)) {\n            errors.search = 'Enter letters!'\n        }    \n        return errors                                                           //результат попадает в формик\n    }\n\nconst FormSearch = () => {\n    const [char, setChar] = useState(null);\n    const {process, clearError, setProcess, searchCharacter} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = (searchName) => {\n        clearError();\n\n        searchCharacter(searchName)\n            .then(onCharLoaded)\n            .then(()=> setProcess('confirmed'))\n    }\n\n    const result = !char ? null : char.length > 0 ?\n\n        <>\n            {char.map(el => {\n                return (\n                    <>\n                        <div className='form__success' >{el.name}</div>\n                        <Link to={`/character/${el.id}`}\n                              className=\"form__link\">\n                            <img src={el.thumbnail} alt={el.name}/>\n                        </Link>\n                    </>\n                )\n            })}\n        </> : <div className='form__error' >The character was not found. Check the name and try again</div>\n    \n    return (\n        <Formik \n            initialValues = {{                                                  //передаем как пропсы\n                search: '',           \n            }}\n            validate = {validate}         \n            onSubmit = {values => {\n                return updateChar(values.search)}}                              //получаем результат из формы\n            >\n            <Form className=\"form\">\n                <label className='form__label'>Or find a character by name:</label>\n                <Field \n                    name='search' \n                    type='text' \n                    className=\"form__input\" \n                    placeholder='Enter name' \n                />\n                <ErrorMessageForm name='search' component=\"div\" className='form__error' />\n                <button type=\"submit\" className=\"button button__main\">\n                    <div className=\"inner\">FIND</div>\n                </button>\n                {setContent(process, ErrorMessage, result)}\n            </Form>\n        </Formik>\n    )\n};\n\nexport default FormSearch;","import decoration from \"../../resources/img/vision.png\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport { useState } from \"react\";\nimport FormSearch from \"../formSearch/FormSearch\";\nimport Helmet from 'react-helmet';\n\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const getCharId = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <>  \n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information porta\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList getCharId={getCharId} />\n                </ErrorBoundary>\n                <div className=\"char__sticky\">\n                    <ErrorBoundary>\n                        <FormSearch/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    );\n};\n\nexport default MainPage;","import { useHttp } from \"../components/hooks/useHttp\";\n\n/**\n * Кастомный хук для взаимодействия с API Marvel.\n * Предоставляет методы для получения данных о персонажах и комиксах из API Marvel.\n * Также предоставляет методы для управления ошибками и процессами запросов.\n * @returns {Object} Объект с методами для работы с API Marvel.\n */\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=e085346ae8f6005895c9c698543ab5ab';\n    const _baseOffset = 140\n    const {request, clearError, process, setProcess} = useHttp();                        //получаем из хука объект с методами\n    \n    const getAllCharacters = async (offset = _baseOffset) => {           //если аргумент не передается, то используем _baseOffset\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);                                       //или .map(item => this._transformCharacter(item))\n    };\n\n    const getCharacter = async(id) => {\n        const res  = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0])\n    };\n\n    const searchCharacter = async(name) => {                                       //поиск персонажа по имени\n        const res  = await request(`${_apiBase}characters?nameStartsWith=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    };\n\n    const _transformCharacter = (char) => {\n        return {\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            id: char.id,\n            comics: char.comics.items,\n        }\n    };\n    \n    const getAllComics = async (offset = 2) => {           \n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_trensformComics);      \n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _trensformComics(res.data.results[0]);\n    }\n\n    const _trensformComics = (comics) => {\n        return {\n            title: comics.title,\n            images: comics.thumbnail.path+ '.' + comics.thumbnail.extension,\n            id: comics.id,\n            prices: comics.prices[0].price,\n            usl: comics.resourceURI,\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            description: comics.description || 'There is no description',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {getAllCharacters, \n            getCharacter, \n            clearError, \n            getAllComics, \n            getComic, \n            searchCharacter, \n            process, \n            setProcess};\n};\n\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback ( async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'} ) => {\n        \n        setProcess('loading')                                            //процесс загрузки/ожидания\n\n        try{\n            const response = await fetch(url, {method, body, headers});\n\n            if(!response.ok){\n                throw new Error(`Cold not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            // setProcess('confirmed') подтвержденный, но здесь удаляем это состояние так как асинхронная операция будут ошибки\n            return data;            \n        } catch(e){\n            setProcess('error')                                           //ошибка в процессе\n            throw e;\n        }                        \n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading')\n    }, []);  \n\n    return {request, clearError, process, setProcess}\n};","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\n\nconst setContent = (process, Component, data) => {                        //в зависимости от состояния process рендерим верстку\n    switch (process) {\n        case 'waiting': return  <Skeleton/>;\n            // break;\n        case 'loading': return <Spinner/>;\n            // break;\n        case 'confirmed': return <Component data={data} />;\n            // break;\n        case 'error': return <ErrorMessage/>;\n            // break;\n        default :  throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","src","alt","style","display","margin","View","_ref","data","_useState5","useState","_useState6","_slicedToArray","blockShow","setBlockShow","useEffect","name","description","thumbnail","homepage","wiki","descrFix","slice","styleImgChar","includes","objectFit","CSSTransition","classNames","timeout","in","unmountOnExit","_jsxs","className","href","_useState","_useState2","char","setChar","_useState3","_useState4","_useMarvelService","useMarvelService","process","setProcess","getCharacter","clearError","updateChar","timerId","setInterval","clearInterval","onCharLoded","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharList","offset","setOffset","newItemLoading","setNewItemLoading","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","updateCharList","res","newCharList","ended","_toConsumableArray","onCharListLoaded","itemRefs","useRef","handleClick","i","getCharId","current","forEach","item","classList","remove","add","focus","focusOnItem","elements","useMemo","Spinner","Error","characters","charLi","map","items","styleImg","ref","el","tabIndex","TransitionGroup","component","renderItems","disabled","onRequest","comics","_Fragment","idComicInfo","resourceURI","match","Link","to","charId","isOpen","setIsOpen","onCharLoaded","xmlns","version","width","height","viewBox","x","y","fill","cx","cy","r","attributeName","type","values","calcMode","dur","repeatCount","result","SmallSpinner","validate","errors","search","test","searchCharacter","Formik","initialValues","onSubmit","searchName","Form","Field","placeholder","ErrorMessageForm","selectedChar","Helmet","content","RandomChar","CharList","FormSearch","CharInfo","decoration","_apiBase","_apiKey","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","results","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","path","extension","urls","getAllComics","_ref4","_callee4","_args4","_context4","_trensformComics","getComic","_ref5","_callee5","_context5","_x3","title","images","prices","price","usl","pageCount","language","textObjects","Skeleton"],"sourceRoot":""}