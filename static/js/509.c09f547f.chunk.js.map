{"version":3,"file":"static/js/509.c09f547f.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicPage.js","services/MarvelServices.js","components/hooks/useHttp.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport {Component} from \"react\";\n\n\nclass ErrorBoundary extends Component {                             //классовай компонент отлавливающий ошибки\n\n    state = {\n        error: false\n    };\n\n    componentDidCatch(error, errorInfo) {                      //хук срабатывающий при ошибке\n        debugger\n        console.log(error, errorInfo);\n        this.setState({error: true})\n    };\n\n    render () {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import errorGif from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img src={errorGif} alt=\"error\" style={{display: 'block', margin: '0 auto'}} />\n\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />   //если используем файл из папки public\n    )\n}\n\nexport default ErrorMessage;","import './comicsList.scss';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelServices';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nconst setContent = (process, Component, newItemLoading) => {           //не импортируем а делаем кастомный из-за newItemLoading\n    switch (process) {\n        case 'waiting': return  <Spinner/>;\n            // break;\n        case 'loading': return newItemLoading ? <Component/> : <Spinner/>;\n            // break;\n        case 'confirmed': return <Component/>;\n            // break;\n        case 'error': return <ErrorMessage/>;\n            // break;\n        default :  throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comics, setComics] = useState([]);                               //нач зн обязательно массив\n    const [offset, setOffset] = useState(0);                              //для отсчета количества комиксов передается в getAllComics\n    const [newItemLoading, setNewItemLoading] = useState(false);          //для контроля disabled кнопки загрузки новых комиксов\n    const [comicsEnded, setComicsEnded] = useState(false);                //для контроля display кнопки загрузки новых комиксов\n    const {process, setProcess, getAllComics} = useMarvelService();    \n\n    const onRequest = (offset) => {\n        setNewItemLoading(true);\n        updateComicsList(offset);\n    };\n\n    const onSetComics = (newComics) => {\n        if (newComics.length < 8 ){                                      //если длинна подгруженного массива < 8 \n            setComicsEnded(true)\n        }      \n        \n        setComics([...comics, ...newComics])                             //добавляем в массив комиксов новый массив \n        setOffset(offset => offset + 8);                                 //следующие 8 комиксов \n        setNewItemLoading(false);\n    }; \n\n    const updateComicsList = (offset) => {\n        getAllComics(offset)\n            .then(res => onSetComics(res))\n            .then(()=>setProcess('confirmed'))\n    };\n\n    useEffect(() => {\n        updateComicsList()\n    }, []);\n\n    const renderComics = (comicses) => {\n\n        const comicsList = comicses.map((item, i)=> {                    //получаем массив comics и перебираем \n            const {title, images, prices, id} = item;                    //деструктурируем данные из каждого item\n\n            return (\n                <CSSTransition\n                    classNames={'comics__item'}\n                    timeout={500}\n                    key={i}\n                    >\n                    <li className=\"comics__item\"\n                        key={i}                                          //в key порядковый номер, так как id повторяются\n                        >\n                        <Link to={`/comics/${id}`}>                          \n                            <img src={images} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{title}</div>\n                            <div className=\"comics__item-price\">{prices ? prices + ' $' : null}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            );\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {comicsList}\n                </TransitionGroup>\n            </ul>\n        )\n    };   \n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, ()=> renderComics(comics), newItemLoading)}\n            <button \n                onClick={() => onRequest(offset)}\n                disabled={newItemLoading}                                //отключаем копку во время подгрузки новых комиксов  \n                style={{'display': comicsEnded ? 'none': 'block'}}       //если массив комиксов меньше 8, скрываем кнопку\n                className=\"button button__main button__long\">\n                <div className=\"inner\">\n                    {newItemLoading ? 'Loading...' : 'load more'}        \n                </div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import Helmet from 'react-helmet';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <ErrorBoundary>\n                <AppBanner />\n                <ComicsList />\n            </ErrorBoundary>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useHttp } from \"../components/hooks/useHttp\";\n\n/**\n * Кастомный хук для взаимодействия с API Marvel.\n * Предоставляет методы для получения данных о персонажах и комиксах из API Marvel.\n * Также предоставляет методы для управления ошибками и процессами запросов.\n * @returns {Object} Объект с методами для работы с API Marvel.\n */\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=e085346ae8f6005895c9c698543ab5ab';\n    const _baseOffset = 210 \n    const {request, clearError, process, setProcess} = useHttp();             //получаем из хука обьект с методами     \n    \n    const getAllCharacters = async (offset = _baseOffset) => {           //если аргумент не передается, то используем _baseOffset\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_trensformCharacter);                //или .map(item => this._trensformCharacter(item))   \n    };\n\n    const getCharacter = async(id) => {\n        const res  = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _trensformCharacter(res.data.results[0])\n    };\n    const searchCharacter = async(name) => {                             //поиск персонажа по имени\n        const res  = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_trensformCharacter) \n    };\n    const _trensformCharacter = (char) => {\n        return {\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            id: char.id,\n            comics: char.comics.items,\n        }\n    };\n    \n    const getAllComics = async (offset = 2) => {           \n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_trensformComics);      \n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _trensformComics(res.data.results[0]);\n    }\n\n    const _trensformComics = (comics) => {\n        return {\n            title: comics.title,\n            images: comics.thumbnail.path+ '.' + comics.thumbnail.extension,\n            id: comics.id,\n            prices: comics.prices[0].price,\n            usl: comics.resourceURI,\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            description: comics.description || 'There is no description',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {getAllCharacters, \n            getCharacter, \n            clearError, \n            getAllComics, \n            getComic, \n            searchCharacter, \n            process, \n            setProcess};\n};\n\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback ( async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'} ) => {\n        \n        setProcess('loading')                                            //процесс загрузки/ожидания\n\n        try{\n            const response = await fetch(url, {method, body, headers});\n\n            if(!response.ok){\n                throw new Error(`Cold not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            // setProcess('confirmed') подтвержденный, но здесь удаляем это состояние так как асинхронная операция будут ошибки\n            return data;            \n        } catch(e){\n            setProcess('error')                                           //ошибка в процессе\n            throw e;\n        }                        \n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading')\n    }, []);  \n\n    return {request, clearError, process, setProcess}\n};"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","ErrorMessage","props","Component","style","display","margin","setContent","process","newItemLoading","Spinner","Error","_useState","useState","_useState2","_slicedToArray","comics","setComics","_useState3","_useState4","offset","setOffset","_useState5","_useState6","setNewItemLoading","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","setProcess","getAllComics","updateComicsList","then","res","newComics","_toConsumableArray","useEffect","comicses","comicsList","map","item","i","title","images","prices","id","CSSTransition","classNames","timeout","Link","to","TransitionGroup","component","renderComics","onClick","onRequest","disabled","_Fragment","Helmet","name","content","AppBanner","ComicsList","_apiBase","_apiKey","_useHttp","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","clearError","useHttp","getAllCharacters","results","_trensformCharacter","getCharacter","_ref2","_callee2","_context2","searchCharacter","_ref3","_callee3","_context3","_x2","char","description","thumbnail","path","extension","homepage","urls","wiki","items","_ref4","_callee4","_args4","_context4","_trensformComics","getComic","_ref5","_callee5","_context5","_x3","price","usl","resourceURI","pageCount","language","textObjects"],"sourceRoot":""}