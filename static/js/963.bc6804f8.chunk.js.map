{"version":3,"file":"static/js/963.bc6804f8.chunk.js","mappings":"yRAiBA,EAbkB,WACd,OACIA,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAUC,IAAI,cACxBN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRC,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKC,IAAKG,EAAcD,IAAI,oBAGxC,C,oECLA,EARqB,WACjB,OACIH,EAAAA,EAAAA,KAAA,OAAKC,I,64HAAeE,IAAI,QAAQE,MAAO,CAACC,QAAS,QAASC,OAAQ,WAI1E,C,uGC+BA,UAjCmB,SAAHC,GAA+B,IAA1BC,EAASD,EAATC,UAAWC,EAAQF,EAARE,SACrBC,GAAMC,EAAAA,EAAAA,MAAND,GACPE,GAAwBC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkEC,EAAAA,EAAAA,KAA3DC,EAAOF,EAAPE,QAASC,EAAUH,EAAVG,WAAYC,EAAQJ,EAARI,SAAUC,EAAYL,EAAZK,aAAcC,EAAUN,EAAVM,YAEpDC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,CAAChB,IAEJ,IAAMgB,EAAa,WAGf,OAFAF,IAEQf,GACJ,IAAK,QACDa,EAASZ,GAAIiB,KAAKC,GAAcD,MAAK,kBAAKN,EAAW,YAAY,IACjE,MACJ,IAAK,YACDE,EAAab,GAAIiB,KAAKC,GAAcD,MAAK,kBAAKN,EAAW,YAAY,IAEjF,EAEMO,EAAe,SAACZ,GAClBC,EAAQD,EACZ,EAEA,OACIpB,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA/B,SAAA,EACIC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAS,KACTC,EAAAA,EAAAA,GAAWX,EAASZ,EAAWQ,KAG5C,C,mGCoCA,EAhEyB,WACrB,IAAMgB,EAAW,4CACXC,EAAU,0CAEhBC,ECVmB,WACnB,IAAAtB,GAA8BC,EAAAA,EAAAA,UAAS,WAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CQ,EAAON,EAAA,GAAEO,EAAUP,EAAA,GAEpBqB,GAAUC,EAAAA,EAAAA,aAAW,eAAA7B,GAAA8B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAA7B,EAAA8B,EAAAC,UAAA,OAAAT,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE6B,OAF3BT,EAAMI,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,MAAOH,EAAIG,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,KAAMF,EAAOE,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,CAAC,eAAgB,oBAE9FzB,EAAW,WAAsD4B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGtCG,MAAMb,EAAK,CAACC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IAAU,KAAD,EAA5C,IAARC,EAAQI,EAAAM,MAEDC,GAAG,CAADP,EAAAE,KAAA,eACL,IAAIM,MAAM,kBAADC,OAAmBjB,EAAG,aAAAiB,OAAYb,EAASc,SAAU,KAAD,UAAAV,EAAAE,KAAA,GAGpDN,EAASe,OAAO,KAAD,GAAxB,OAAJ5C,EAAIiC,EAAAM,KAAAN,EAAAY,OAAA,SAGH7C,GAAI,QAEmD,MAFnDiC,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAEX5B,EAAW,SAAmD4B,EAAAa,GAAA,yBAAAb,EAAAc,OAAA,GAAAvB,EAAA,mBAGrE,gBAAAwB,GAAA,OAAAzD,EAAA0D,MAAA,KAAAlB,UAAA,EAnB0B,GAmBxB,IAMH,MAAO,CAACZ,QAAAA,EAASX,YAJEY,EAAAA,EAAAA,cAAY,WAC3Bf,EAAW,UACf,GAAG,IAE0BD,QAAAA,EAASC,WAAAA,EAC1C,CDnBuD6C,GAA5C/B,EAAOD,EAAPC,QAASX,EAAUU,EAAVV,WAAYJ,EAAOc,EAAPd,QAASC,EAAUa,EAAVb,WAE/B8C,EAAgB,eAAA5D,GAAA8B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAA4B,EAAAC,EAAAvB,EAAAC,UAAA,OAAAT,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA2B,OAApBiB,EAAMtB,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAHlB,IAGgCG,EAAAE,KAAA,EAC9BhB,EAAQ,GAADuB,OAAI1B,EAAQ,8BAAA0B,OAA6BU,EAAM,KAAAV,OAAIzB,IAAW,KAAD,EAA7E,OAAHoC,EAAGpB,EAAAM,KAAAN,EAAAY,OAAA,SACFQ,EAAIrD,KAAKsD,QAAQC,IAAIC,IAAoB,wBAAAvB,EAAAc,OAAA,GAAAvB,EAAA,KACnD,kBAHqB,OAAAjC,EAAA0D,MAAA,KAAAlB,UAAA,KAKhBxB,EAAY,eAAAkD,GAAApC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAmC,EAAMhE,GAAE,IAAA2D,EAAA,OAAA/B,EAAAA,EAAAA,KAAAU,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACNhB,EAAQ,GAADuB,OAAI1B,EAAQ,eAAA0B,OAAchD,EAAE,KAAAgD,OAAIzB,IAAW,KAAD,EAA3D,OAAHoC,EAAGM,EAAApB,KAAAoB,EAAAd,OAAA,SACFW,EAAoBH,EAAIrD,KAAKsD,QAAQ,KAAG,wBAAAK,EAAAZ,OAAA,GAAAW,EAAA,KAClD,gBAHiBV,GAAA,OAAAS,EAAAR,MAAA,KAAAlB,UAAA,KAIZ6B,EAAe,eAAAC,GAAAxC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuC,EAAMC,GAAI,IAAAV,EAAA,OAAA/B,EAAAA,EAAAA,KAAAU,MAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAA6B,EAAA7B,KAAA,EACXhB,EAAQ,GAADuB,OAAI1B,EAAQ,oBAAA0B,OAAmBqB,EAAI,KAAArB,OAAIzB,IAAW,KAAD,EAAlE,OAAHoC,EAAGW,EAAAzB,KAAAyB,EAAAnB,OAAA,SACFQ,EAAIrD,KAAKsD,QAAQC,IAAIC,IAAoB,wBAAAQ,EAAAjB,OAAA,GAAAe,EAAA,KACnD,gBAHoBG,GAAA,OAAAJ,EAAAZ,MAAA,KAAAlB,UAAA,KAIfyB,EAAsB,SAACU,GACzB,MAAO,CACHH,KAAMG,EAAKH,KACXI,YAAaD,EAAKC,YAClBC,UAAWF,EAAKE,UAAUC,KAAO,IAAMH,EAAKE,UAAUE,UACtDC,SAAUL,EAAKM,KAAK,GAAG/C,IACvBgD,KAAMP,EAAKM,KAAK,GAAG/C,IACnB/B,GAAIwE,EAAKxE,GACTgF,OAAQR,EAAKQ,OAAOC,MAE5B,EAEMC,EAAY,eAAAC,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,IAAA,IAAA1B,EAAAC,EAAA0B,EAAAhD,UAAA,OAAAT,EAAAA,EAAAA,KAAAU,MAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,OAAiB,OAAViB,EAAM2B,EAAA3C,OAAA,QAAAC,IAAA0C,EAAA,GAAAA,EAAA,GAAG,EAACC,EAAA7C,KAAA,EAChBhB,EAAQ,GAADuB,OAAI1B,EAAQ,0BAAA0B,OAAyBU,EAAM,KAAAV,OAAIzB,IAAW,KAAD,EAAzE,OAAHoC,EAAG2B,EAAAzC,KAAAyC,EAAAnC,OAAA,SACFQ,EAAIrD,KAAKsD,QAAQC,IAAI0B,IAAiB,wBAAAD,EAAAjC,OAAA,GAAA+B,EAAA,KAChD,kBAHiB,OAAAD,EAAA5B,MAAA,KAAAlB,UAAA,KAKZzB,EAAQ,eAAA4E,GAAA7D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4D,EAAOzF,GAAE,IAAA2D,EAAA,OAAA/B,EAAAA,EAAAA,KAAAU,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EACJhB,EAAQ,GAADuB,OAAI1B,EAAQ,WAAA0B,OAAUhD,EAAE,KAAAgD,OAAIzB,IAAW,KAAD,EAAtD,OAAHoC,EAAG+B,EAAA7C,KAAA6C,EAAAvC,OAAA,SACFoC,EAAiB5B,EAAIrD,KAAKsD,QAAQ,KAAG,wBAAA8B,EAAArC,OAAA,GAAAoC,EAAA,KAC/C,gBAHaE,GAAA,OAAAH,EAAAjC,MAAA,KAAAlB,UAAA,KAKRkD,EAAmB,SAACP,GACtB,MAAO,CACHY,MAAOZ,EAAOY,MACdC,OAAQb,EAAON,UAAUC,KAAM,IAAMK,EAAON,UAAUE,UACtD5E,GAAIgF,EAAOhF,GACX8F,OAAQd,EAAOc,OAAO,GAAGC,MACzBC,IAAKhB,EAAOiB,YACZC,UAAWlB,EAAOkB,UAAS,GAAAlD,OAAMgC,EAAOkB,UAAS,OAAQ,2CACzDzB,YAAaO,EAAOP,aAAe,0BACnC0B,SAAUnB,EAAOoB,YAAYD,UAAY,QAEjD,EAEA,MAAO,CAAC1C,iBAAAA,EACA5C,aAAAA,EACAC,WAAAA,EACAoE,aAAAA,EACAtE,SAAAA,EACAsD,gBAAAA,EACAxD,QAAAA,EACAC,WAAAA,EACZ,C,8EEpDA,EAjBiB,WACb,OACIzB,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA/B,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAEnBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,+BAI/B,E,UCCA,EAdmB,SAACuB,EAASZ,EAAWQ,GACpC,OAAQI,GACJ,IAAK,UAAW,OAAQrB,EAAAA,EAAAA,KAACgH,EAAQ,IAEjC,IAAK,UAAW,OAAOhH,EAAAA,EAAAA,KAACiH,EAAAA,EAAO,IAE/B,IAAK,YAAa,OAAOjH,EAAAA,EAAAA,KAACS,EAAS,CAACQ,KAAMA,IAE1C,IAAK,QAAS,OAAOjB,EAAAA,EAAAA,KAACkH,EAAAA,EAAY,IAElC,QAAW,MAAM,IAAIxD,MAAM,4BAEnC,C","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","services/MarvelServices.js","components/hooks/useHttp.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import errorGif from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img src={errorGif} alt=\"error\" style={{display: 'block', margin: '0 auto'}} />\n\n        //<img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />   //если используем файл из папки public\n    )\n}\n\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelServices';\nimport AppBanner from '../appBanner/AppBanner';\nimport setContent from '../../utils/setContent';\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams();                                     //получаем id из адресной строки \n    const [data, setData] = useState({});  \n    const {process, setProcess, getComic, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateData()\n    }, [id])\n    \n    const updateData = () => {\n        clearError();\n\n        switch (dataType) {\n            case 'comic':\n                getComic(id).then(onDataLoaded).then(()=> setProcess('confirmed'));\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded).then(()=> setProcess('confirmed'));\n        }\n    }\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    }; \n\n    return(\n        <>\n            <AppBanner/>\n            {setContent(process, Component, data)}\n        </>\n    );\n}\n\nexport default SinglePage;","import { useHttp } from \"../components/hooks/useHttp\";\n\n/**\n * Кастомный хук для взаимодействия с API Marvel.\n * Предоставляет методы для получения данных о персонажах и комиксах из API Marvel.\n * Также предоставляет методы для управления ошибками и процессами запросов.\n * @returns {Object} Объект с методами для работы с API Marvel.\n */\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=e085346ae8f6005895c9c698543ab5ab';\n    const _baseOffset = 210 \n    const {request, clearError, process, setProcess} = useHttp();             //получаем из хука обьект с методами     \n    \n    const getAllCharacters = async (offset = _baseOffset) => {           //если аргумент не передается, то используем _baseOffset\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_trensformCharacter);                //или .map(item => this._trensformCharacter(item))   \n    };\n\n    const getCharacter = async(id) => {\n        const res  = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _trensformCharacter(res.data.results[0])\n    };\n    const searchCharacter = async(name) => {                             //поиск персонажа по имени\n        const res  = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_trensformCharacter) \n    };\n    const _trensformCharacter = (char) => {\n        return {\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            id: char.id,\n            comics: char.comics.items,\n        }\n    };\n    \n    const getAllComics = async (offset = 2) => {           \n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_trensformComics);      \n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _trensformComics(res.data.results[0]);\n    }\n\n    const _trensformComics = (comics) => {\n        return {\n            title: comics.title,\n            images: comics.thumbnail.path+ '.' + comics.thumbnail.extension,\n            id: comics.id,\n            prices: comics.prices[0].price,\n            usl: comics.resourceURI,\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            description: comics.description || 'There is no description',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {getAllCharacters, \n            getCharacter, \n            clearError, \n            getAllComics, \n            getComic, \n            searchCharacter, \n            process, \n            setProcess};\n};\n\nexport default useMarvelService;","import { useState, useCallback } from \"react/cjs/react.development\";\n\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback ( async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'} ) => {\n        \n        setProcess('loading')                                            //процесс загрузки/ожидания\n\n        try{\n            const response = await fetch(url, {method, body, headers});\n\n            if(!response.ok){\n                throw new Error(`Cold not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            // setProcess('confirmed') подтвержденный, но здесь удаляем это состояние так как асинхронная операция будут ошибки\n            return data;            \n        } catch(e){\n            setProcess('error')                                           //ошибка в процессе\n            throw e;\n        }                        \n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading')\n    }, []);  \n\n    return {request, clearError, process, setProcess}\n};","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\n\nconst setContent = (process, Component, data) => {                        //в зависимости от состояния process рендерим верстку\n    switch (process) {\n        case 'waiting': return  <Skeleton/>;\n            // break;\n        case 'loading': return <Spinner/>;\n            // break;\n        case 'confirmed': return <Component data={data} />;\n            // break;\n        case 'error': return <ErrorMessage/>;\n            // break;\n        default :  throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","style","display","margin","_ref","Component","dataType","id","useParams","_useState","useState","_useState2","_slicedToArray","data","setData","_useMarvelService","useMarvelService","process","setProcess","getComic","getCharacter","clearError","useEffect","updateData","then","onDataLoaded","_Fragment","AppBanner","setContent","_apiBase","_apiKey","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","useHttp","getAllCharacters","offset","res","results","map","_trensformCharacter","_ref2","_callee2","_context2","searchCharacter","_ref3","_callee3","name","_context3","_x2","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_ref4","_callee4","_args4","_context4","_trensformComics","_ref5","_callee5","_context5","_x3","title","images","prices","price","usl","resourceURI","pageCount","language","textObjects","Skeleton","Spinner","ErrorMessage"],"sourceRoot":""}